# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# Sample historical project data
# Each row represents a past project with the following attributes:
# - 'Complexity': A rating of project complexity (low = 1, high = 5)
# - 'TeamSize': Number of team members involved
# - 'Budget': Budget for the project in $1000s
# - 'Duration': Duration of the project in weeks (this is the target variable we want to predict)

data = {
    'Complexity': [1, 3, 4, 5, 2, 3, 1, 4, 5, 2],
    'TeamSize': [3, 10, 8, 15, 5, 8, 4, 12, 16, 6],
    'Budget': [50, 200, 150, 300, 80, 180, 60, 220, 320, 100],
    'Duration': [6, 12, 10, 20, 8, 11, 7, 14, 21, 9]
}

# Convert data into a DataFrame
df = pd.DataFrame(data)

# Step 1: Define the feature variables (input) and the target variable (output)
X = df[['Complexity', 'TeamSize', 'Budget']]  # Features
y = df['Duration']  # Target variable (project duration)

# Step 2: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 3: Train a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 4: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 5: Evaluate the model performance using Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae:.2f} weeks')

# Step 6: Predict project duration for a new project
new_project = [[4, 10, 150]]  # Example of a new project (Complexity 4, TeamSize 10, Budget $150k)
predicted_duration = model.predict(new_project)
print(f'Predicted Duration for the new project: {predicted_duration[0]:.2f} weeks')
