# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Sample log data for training
# Each row represents a log entry with the following attributes:
# - 'CPUUsage': CPU usage percentage
# - 'MemoryUsage': Memory usage percentage
# - 'DiskUsage': Disk usage percentage
# - 'ErrorCount': Number of errors reported
# - 'IsBug': Whether the log entry represents a bug (1) or normal operation (0)

data = {
    'CPUUsage': [10, 50, 70, 90, 40, 80, 95, 20, 15, 85],
    'MemoryUsage': [30, 60, 80, 95, 50, 85, 98, 25, 20, 88],
    'DiskUsage': [20, 55, 75, 92, 45, 80, 93, 30, 25, 90],
    'ErrorCount': [0, 1, 2, 5, 0, 3, 6, 0, 0, 4],
    'IsBug': [0, 0, 1, 1, 0, 1, 1, 0, 0, 1]
}

# Convert data into a DataFrame
df = pd.DataFrame(data)

# Step 1: Define the feature variables (input) and the target variable (output)
X = df[['CPUUsage', 'MemoryUsage', 'DiskUsage', 'ErrorCount']]  # Features
y = df['IsBug']  # Target variable (bug or no bug)

# Step 2: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 3: Train a Random Forest Classifier model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 4: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 5: Evaluate the model's performance
print("Classification Report:\n")
print(classification_report(y_test, y_pred))

# Step 6: Simulate monitoring new log entries and report potential bugs
def report_maintenance(log_entry):
    prediction = model.predict([log_entry])[0]
    if prediction == 1:
        return "Warning: Potential bug detected! Requires maintenance."
    else:
        return "System operating normally."

# Example new log entries (CPUUsage, MemoryUsage, DiskUsage, ErrorCount)
new_logs = [
    [85, 90, 92, 3],  # High CPU/Memory/Disk usage with errors (likely a bug)
    [25, 40, 30, 0],  # Normal operation
    [90, 95, 90, 6],  # Severe resource usage and errors (high probability of bug)
    [15, 20, 25, 0]   # Low resource usage and no errors (normal)
]

# Step 7: Report maintenance needs for new log entries
for log in new_logs:
    print(report_maintenance(log))
