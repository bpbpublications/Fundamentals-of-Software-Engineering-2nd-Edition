# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_absolute_error, accuracy_score

# Sample historical deployment data
# Each row represents a past deployment with the following attributes:
# - 'TrafficLoad': Predicted server load during deployment (in %)
# - 'TeamAvailability': Availability of the DevOps team (scale of 1 to 5)
# - 'PastIssues': Number of issues encountered in past deployments
# - 'TimeOfDay': Time of day for deployment (1: Morning, 2: Afternoon, 3: Evening, 4: Night)
# - 'Success': Whether the deployment was successful (1: Success, 0: Rollback)
# - 'OptimalTime': Optimal deployment time (in 24-hour format)

data = {
    'TrafficLoad': [60, 85, 30, 45, 70, 55, 95, 50, 40, 20],
    'TeamAvailability': [5, 4, 3, 4, 5, 4, 2, 3, 5, 4],
    'PastIssues': [0, 3, 1, 2, 1, 0, 5, 2, 1, 0],
    'TimeOfDay': [3, 4, 2, 1, 3, 2, 4, 2, 1, 1],
    'Success': [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
    'OptimalTime': [10, 22, 9, 7, 12, 10, 23, 11, 8, 6]
}

# Convert data into a DataFrame
df = pd.DataFrame(data)

# Step 1: Define features and target for predicting optimal deployment time (Regression)
X_time = df[['TrafficLoad', 'TeamAvailability', 'PastIssues']]
y_time = df['OptimalTime']

# Step 2: Split the data into training and testing sets for time prediction
X_train_time, X_test_time, y_train_time, y_test_time = train_test_split(X_time, y_time, test_size=0.3, random_state=42)

# Step 3: Train a Random Forest Regressor for predicting the optimal deployment time
time_model = RandomForestRegressor(n_estimators=100, random_state=42)
time_model.fit(X_train_time, y_train_time)

# Step 4: Make predictions on the test set
y_pred_time = time_model.predict(X_test_time)

# Evaluate the time prediction model
mae_time = mean_absolute_error(y_test_time, y_pred_time)
print(f"Mean Absolute Error for Optimal Deployment Time: {mae_time:.2f} hours")

# Step 5: Define features and target for deciding if deployment should proceed or rollback (Classification)
X_success = df[['TrafficLoad', 'TeamAvailability', 'PastIssues', 'TimeOfDay']]
y_success = df['Success']

# Step 6: Split the data into training and testing sets for deployment success prediction
X_train_success, X_test_success, y_train_success, y_test_success = train_test_split(X_success, y_success, test_size=0.3, random_state=42)

# Step 7: Train a Random Forest Classifier for predicting deployment success
success_model = RandomForestClassifier(n_estimators=100, random_state=42)
success_model.fit(X_train_success, y_train_success)

# Step 8: Make predictions on the test set
y_pred_success = success_model.predict(X_test_success)

# Evaluate the success prediction model
accuracy_success = accuracy_score(y_test_success, y_pred_success)
print(f"Deployment Success Prediction Accuracy: {accuracy_success * 100:.2f}%")

# Step 9: Predict the optimal deployment time and success for a new deployment
new_deployment = [[75, 5, 2]]  # Example input: TrafficLoad 75%, TeamAvailability 5, PastIssues 2
new_time = time_model.predict(new_deployment)
print(f"Predicted Optimal Deployment Time: {new_time[0]:.2f} hours")

new_success = [[75, 5, 2, 3]]  # Example input: TrafficLoad 75%, TeamAvailability 5, PastIssues 2, TimeOfDay 3
predicted_success = success_model.predict(new_success)
print(f"Deployment Success Prediction: {'Success' if predicted_success[0] == 1 else 'Rollback'}")
